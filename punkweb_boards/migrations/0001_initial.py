# Generated by Django 2.0.2 on 2018-02-09 08:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import punkweb_boards.models
import easy_thumbnails.fields
import precise_bbcode.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BoardProfile',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', easy_thumbnails.fields.ThumbnailerImageField(blank=True, null=True, upload_to=punkweb_boards.models.profile_image_file_name)),
                ('_signature_rendered', models.TextField(blank=True, editable=False, null=True)),
                ('signature', precise_bbcode.fields.BBCodeTextField(blank=True, max_length=1024, no_rendered_field=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('f', 'Female'), ('m', 'Male')], default=None, max_length=1, null=True)),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Birth date')),
                ('is_banned', models.BooleanField(default=False)),
                ('username_modifier', models.TextField(blank=True, help_text='BBCode. Just add {USER} where you want the username to be placed at. Setting this will override the UserRank modification', max_length=250, null=True)),
                ('downvoted_by', models.ManyToManyField(blank=True, related_name='punkweb_boards_boardprofile_downvoted', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=96, unique=True)),
                ('_description_rendered', models.TextField(blank=True, editable=False, null=True)),
                ('description', precise_bbcode.fields.BBCodeTextField(blank=True, max_length=256, no_rendered_field=True, null=True)),
                ('order', models.IntegerField()),
                ('auth_req', models.BooleanField(default=False, help_text='Can only logged in users view this category?')),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ('order',),
                'verbose_name': 'category',
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('subject', models.TextField(blank=True, default='No subject', max_length=140, null=True)),
                ('unread_by', models.ManyToManyField(blank=True, related_name='unread_conversations', to=settings.AUTH_USER_MODEL)),
                ('users', models.ManyToManyField(related_name='conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-modified',),
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('_content_rendered', models.TextField(blank=True, editable=False, null=True)),
                ('content', precise_bbcode.fields.BBCodeTextField(max_length=10000, no_rendered_field=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='punkweb_boards.Conversation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.CharField(max_length=140)),
                ('link', models.CharField(max_length=140)),
                ('read', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=256)),
                ('slug', models.SlugField(help_text='The url that this page will be at: /board/pages/{{slug}}', max_length=140, unique=True)),
                ('_content_rendered', models.TextField(blank=True, editable=False, null=True)),
                ('content', precise_bbcode.fields.BBCodeTextField(blank=True, max_length=50000, no_rendered_field=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('_content_rendered', models.TextField(blank=True, editable=False, null=True)),
                ('content', precise_bbcode.fields.BBCodeTextField(max_length=10000, no_rendered_field=True)),
                ('downvoted_by', models.ManyToManyField(blank=True, related_name='punkweb_boards_post_downvoted', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.TextField(max_length=1024)),
                ('resolved', models.BooleanField(default=False)),
                ('date_resolved', models.DateTimeField(blank=True, null=True)),
                ('post', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='punkweb_boards.Post')),
                ('reporting_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_created', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reports_resolved', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Shout',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('_content_rendered', models.TextField(blank=True, editable=False, null=True)),
                ('content', precise_bbcode.fields.BBCodeTextField(max_length=280, no_rendered_field=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=96)),
                ('_description_rendered', models.TextField(blank=True, editable=False, null=True)),
                ('description', precise_bbcode.fields.BBCodeTextField(blank=True, max_length=256, no_rendered_field=True, null=True)),
                ('order', models.IntegerField()),
                ('staff_req', models.BooleanField(default=False, help_text='Can only staff members can create threads in this subcategory?')),
                ('auth_req', models.BooleanField(default=False, help_text='Can only logged in users view this subcategory?')),
                ('parent', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='punkweb_boards.Category')),
            ],
            options={
                'verbose_name_plural': 'subcategories',
                'ordering': ('parent__order', 'order'),
                'verbose_name': 'subcategory',
            },
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=120)),
                ('_content_rendered', models.TextField(blank=True, editable=False, null=True)),
                ('content', precise_bbcode.fields.BBCodeTextField(max_length=30000, no_rendered_field=True)),
                ('pinned', models.BooleanField(default=False)),
                ('closed', models.BooleanField(default=False, help_text='Check to stop users from being able to comment on this thread.')),
                ('tags', models.CharField(blank=True, help_text='Optional. Improves keywoard searching. Separate tags with a comma and space. (eg. news, important, update)', max_length=1024, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='punkweb_boards.Subcategory')),
                ('downvoted_by', models.ManyToManyField(blank=True, related_name='punkweb_boards_thread_downvoted', to=settings.AUTH_USER_MODEL)),
                ('upvoted_by', models.ManyToManyField(blank=True, related_name='punkweb_boards_thread_upvoted', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='threads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='UserRank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=96, unique=True)),
                ('description', models.TextField(blank=True, max_length=256, null=True)),
                ('order', models.IntegerField(help_text='Where this rank ranks among the other ranks')),
                ('is_award', models.BooleanField(default=False)),
                ('award_type', models.CharField(blank=True, choices=[('post_count', 'Post Count')], default=None, max_length=50, null=True)),
                ('award_count', models.IntegerField(blank=True, default=0, null=True)),
                ('username_modifier', models.TextField(blank=True, help_text='BBCode. Just add {USER} where you want the username to be placed at.', max_length=250, null=True)),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.AddField(
            model_name='report',
            name='thread',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='punkweb_boards.Thread'),
        ),
        migrations.AddField(
            model_name='post',
            name='thread',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='punkweb_boards.Thread'),
        ),
        migrations.AddField(
            model_name='post',
            name='upvoted_by',
            field=models.ManyToManyField(blank=True, related_name='punkweb_boards_post_upvoted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='post',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='boardprofile',
            name='ranks',
            field=models.ManyToManyField(blank=True, to='punkweb_boards.UserRank'),
        ),
        migrations.AddField(
            model_name='boardprofile',
            name='upvoted_by',
            field=models.ManyToManyField(blank=True, related_name='punkweb_boards_boardprofile_upvoted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='boardprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL),
        ),
    ]
